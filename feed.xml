<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://wengzf20.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://wengzf20.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2024-02-19T00:18:44+00:00</updated><id>https://wengzf20.github.io/feed.xml</id><title type="html">blank</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">Lessons learned in using linux</title><link href="https://wengzf20.github.io/blog/2024/linux/" rel="alternate" type="text/html" title="Lessons learned in using linux"/><published>2024-02-18T00:00:00+00:00</published><updated>2024-02-18T00:00:00+00:00</updated><id>https://wengzf20.github.io/blog/2024/linux</id><content type="html" xml:base="https://wengzf20.github.io/blog/2024/linux/"><![CDATA[<h3> Don't use rm </h3> <p>Move file to trash and empty trash periodically instead of using <code class="language-plaintext highlighter-rouge">rm</code></p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># ban rm</span>
<span class="nb">echo</span> <span class="nt">-e</span> <span class="s2">"</span><span class="se">\n</span><span class="s2">alias 'rm'='echo "</span>The use of <span class="nb">rm </span>is banned on this system.<span class="s2">"'"</span> <span class="o">&gt;&gt;</span> ~/.bashrc
<span class="nb">source</span> ~/.bashrc
<span class="c"># move file to transh</span>
gio trash path/to/your/files
</code></pre></div></div> <p><br/></p> <h3> Parallel compression </h3> <p>Compress files parallelly using pgiz</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">tar </span>cf - /path/to/directory | pigz <span class="nt">-p</span> 4 <span class="o">&gt;</span> directory.tar.gz
</code></pre></div></div> <p>In this command:</p> <ul> <li><code class="language-plaintext highlighter-rouge">tar cf - /path/to/directory</code> creates an archive of the specified directory and outputs it to standard output (<code class="language-plaintext highlighter-rouge">-</code>).</li> <li><code class="language-plaintext highlighter-rouge">pigz -p 4</code> takes the <code class="language-plaintext highlighter-rouge">tar</code> output from standard input and compresses it using 4 cores (<code class="language-plaintext highlighter-rouge">-p 4</code> option).</li> <li><code class="language-plaintext highlighter-rouge">&gt; directory.tar.gz</code> redirects the compressed output to a file named <code class="language-plaintext highlighter-rouge">directory.tar.gz</code>.</li> </ul>]]></content><author><name></name></author><category term="Notes"/><category term="Code"/><summary type="html"><![CDATA[notes for using linux.]]></summary></entry><entry><title type="html">CompressibleInterFoam: theory, implementation and examples</title><link href="https://wengzf20.github.io/blog/2024/compressibleInterFoam/" rel="alternate" type="text/html" title="CompressibleInterFoam: theory, implementation and examples"/><published>2024-02-01T00:00:00+00:00</published><updated>2024-02-01T00:00:00+00:00</updated><id>https://wengzf20.github.io/blog/2024/compressibleInterFoam</id><content type="html" xml:base="https://wengzf20.github.io/blog/2024/compressibleInterFoam/"><![CDATA[ <p><code class="language-plaintext highlighter-rouge">This page is under development</code></p> <p>CompressibleInterFoam is a default multiphase solver in OpenFOAM. It is capable of solving two compressible, non-isothermal immiscible fluids, with/without cavitation. The phase interface is captured using volume of fluid (VoF) approach.</p> <h2> Derivation from conservation law </h2> <p>The mass conservation for individual species are</p> <p>\begin{equation} \label{eq:mass_alpha1} \frac{\partial\left(\rho_1 \alpha_1\right)}{\partial t}+\nabla \cdot\left(\rho_1 \boldsymbol{U} \alpha_1\right)=\dot{m} \end{equation}</p> <p>\begin{equation} \label{eq:mass_alpha2} \frac{\partial\left(\rho_2 \alpha_2\right)}{\partial t}+\nabla \cdot\left(\rho_2 \boldsymbol{U} \alpha_2\right)=-\dot{m} \end{equation}</p> <p>where \(\alpha_{1}+\alpha_{2} = 1\); \(\dot{m}\) is the source term from phase change. If there is no phase change, \(\dot{m}\) is zero.</p> <p>Consider only the volume fraction in the l.h.s., and move other parts to the r.h.s. to be the source term. Eq. \ref{eq:mass_alpha1} and \ref{eq:mass_alpha2} were re-written as</p> <p>\begin{equation} \label{eq:mass_alpha1_comp} \frac{\partial \alpha_1}{\partial t}+\nabla \cdot\left(\boldsymbol{U} \alpha_1\right)=-\frac{\alpha_1}{\rho_1} \frac{D \rho_1}{D t} + \frac{\dot{m}}{\rho_1} \end{equation}</p> <p>\begin{equation} \label{eq:mass_alpha2_comp} \frac{\partial \alpha_2}{\partial t}+\nabla \cdot\left(\boldsymbol{U} \alpha_2\right)=-\frac{\alpha_2}{\rho_2} \frac{D \rho_2}{D t} - \frac{\dot{m}}{\rho_2} \end{equation}</p> <p>The sum of these two equations lead to</p> <p>\begin{equation} \label{eq:divU} \nabla \cdot\boldsymbol{U}=-\left(\frac{\alpha_1}{\rho_1} \frac{D \rho_1}{D t}+\frac{\alpha_2}{\rho_2} \frac{D \rho_2}{D t}\right)+\dot{m}\left(\frac{1}{\rho_1}-\frac{1}{\rho_2}\right) \end{equation}</p> <p>The 1st and 2nd term in the r.h.s. are the compressibility and phase change effects.</p> <p>Insert it to Eq. \ref{eq:mass_alpha1_comp} by adding and substracting \(\alpha_{1}\nabla \cdot\boldsymbol{U}\)</p> <p>\begin{equation} \label{eq:mass_alpha1_final} \frac{\partial \alpha_1}{\partial t}+\nabla \cdot\left(\boldsymbol{U} \alpha_1\right)=\alpha_1 \alpha_2 \left(\frac{1}{\rho_1} \frac{D \rho_1}{D t}-\frac{1}{\rho_2} \frac{D \rho_2}{D t}\right) +\alpha_1 \nabla \cdot \boldsymbol{U}+\dot{m}\left(\frac{\alpha_2}{\rho_1}+\frac{\alpha_1}{\rho_2}\right) \end{equation}</p> <p>The compressibility, \(\alpha_1 \nabla \cdot \boldsymbol{U}\) and phase change are source terms for the alpha equation. They are separated into \(S_{p}\) and \(S_{u}\) in the MULES algorithm. \(S_{p}\) is implicit source term, \(S_{u}\) is explicit source term.</p> <h2> MULES method </h2> <p>In Eq. \ref{eq:mass_alpha1_final}, it was defined</p> <p>\begin{equation} \mathrm{dgdt}=-\alpha_1 \alpha_2 \left(\frac{1}{\rho_1} \frac{D \rho_1}{D t}-\frac{1}{\rho_2} \frac{D \rho_2}{D t}\right) \end{equation}</p> <p>dgdt was calculated in the pEqn, i.e.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>dgdt =
(
    alpha1*(p_rghEqnComp2 &amp; p_rgh)
    - alpha2*(p_rghEqnComp1 &amp; p_rgh)
);
</code></pre></div></div> <p>In solving Eq. \ref{eq:mass_alpha1_final}, dgdt was separated according to its sign in each cell</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>if (dgdt[celli] &gt; 0.0)
{
    SpRef[celli] -= dgdt[celli]/max(1.0 - alpha1[celli], 1e-4);
    SuRef[celli] += dgdt[celli]/max(1.0 - alpha1[celli], 1e-4);
}
else if (dgdt[celli] &lt; 0.0)
{
    SpRef[celli] += dgdt[celli]/max(alpha1[celli], 1e-4);
}
</code></pre></div></div> <p>The code means, if dgdt &gt; 0</p> \[S_p = \text{phaseChangeS}[1] -\frac{\mathrm{dgdt}}{\alpha_{2}}, S_u = \text{phaseChangeS}[0] + \frac{\mathrm{dgdt}}{\alpha_{2}}\] <p>if dgdt &lt; 0</p> \[S_p = \text{phaseChangeS}[1] + \frac{dgdt}{\alpha_{1}}, S_u = \text{phaseChangeS}[0]\] <p>\(S_p\), \(S_u\) together with other terms were sending to</p> <div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// In src/twoPhaseModels/twoPhaseMixture/VoF/alphaEqn.H</span>
<span class="k">if</span> <span class="p">(</span><span class="n">divU</span><span class="p">.</span><span class="n">valid</span><span class="p">())</span>
<span class="p">{</span>
    <span class="n">MULES</span><span class="o">::</span><span class="n">explicitSolve</span>
    <span class="p">(</span>
        <span class="n">geometricOneField</span><span class="p">(),</span> <span class="c1">// 1</span>
        <span class="n">alpha1</span><span class="p">,</span>
        <span class="n">phiCN</span><span class="p">,</span>  <span class="c1">// phi for Euler ddt method, i.e. U</span>
        <span class="n">alphaPhi10</span><span class="p">,</span> <span class="c1">// alpha*U</span>
        <span class="n">Sp</span><span class="p">(),</span>
        <span class="p">(</span><span class="n">Su</span><span class="p">()</span> <span class="o">+</span> <span class="n">divU</span><span class="p">()</span><span class="o">*</span><span class="n">min</span><span class="p">(</span><span class="n">alpha1</span><span class="p">(),</span> <span class="n">scalar</span><span class="p">(</span><span class="mi">1</span><span class="p">)))(),</span>
        <span class="n">oneField</span><span class="p">(),</span>
        <span class="n">zeroField</span><span class="p">()</span>
    <span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div> <p>In MULES::explicitSolve, the time step was calculated, then limiter was applied, last another <em>explicitSolve</em> was called.</p> <div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// In src/finiteVolume/fvMatrices/solvers/MULES/MULESTemplates.C</span>
<span class="k">const</span> <span class="n">scalar</span> <span class="n">rDeltaT</span> <span class="o">=</span> <span class="mf">1.0</span><span class="o">/</span><span class="n">mesh</span><span class="p">.</span><span class="n">time</span><span class="p">().</span><span class="n">deltaTValue</span><span class="p">();</span>
<span class="n">limit</span><span class="p">(</span><span class="n">rDeltaT</span><span class="p">,</span> <span class="n">rho</span><span class="p">,</span> <span class="n">psi</span><span class="p">,</span> <span class="n">phi</span><span class="p">,</span> <span class="n">phiPsi</span><span class="p">,</span> <span class="n">Sp</span><span class="p">,</span> <span class="n">Su</span><span class="p">,</span> <span class="n">psiMax</span><span class="p">,</span> <span class="n">psiMin</span><span class="p">,</span> <span class="nb">false</span><span class="p">);</span>
<span class="n">explicitSolve</span><span class="p">(</span><span class="n">rDeltaT</span><span class="p">,</span> <span class="n">rho</span><span class="p">,</span> <span class="n">psi</span><span class="p">,</span> <span class="n">phiPsi</span><span class="p">,</span> <span class="n">Sp</span><span class="p">,</span> <span class="n">Su</span><span class="p">);</span> 
<span class="c1">// rho - geometricOneField()</span>
<span class="c1">// psi - alpha1</span>
<span class="c1">// phiPsi - alphaPhi10</span>
<span class="c1">// Sp - SpRef</span>
<span class="c1">// Su - SuRef + alpha1*divU()</span>
</code></pre></div></div> <p>In the latter <em>explicitSolve</em> called, \(\alpha_1\) for next time step was obtained via</p> <div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// In src/finiteVolume/fvMatrices/solvers/MULES/MULESTemplates.C</span>
<span class="n">psiIf</span> <span class="o">=</span>
<span class="p">(</span>
    <span class="n">rho</span><span class="p">.</span><span class="n">oldTime</span><span class="p">().</span><span class="n">field</span><span class="p">()</span><span class="o">*</span><span class="n">psi0</span><span class="o">*</span><span class="n">rDeltaT</span>
    <span class="o">+</span> <span class="n">Su</span><span class="p">.</span><span class="n">field</span><span class="p">()</span>
    <span class="o">-</span> <span class="n">psiIf</span>
<span class="p">)</span><span class="o">/</span><span class="p">(</span><span class="n">rho</span><span class="p">.</span><span class="n">field</span><span class="p">()</span><span class="o">*</span><span class="n">rDeltaT</span> <span class="o">-</span> <span class="n">Sp</span><span class="p">.</span><span class="n">field</span><span class="p">());</span>
</code></pre></div></div> <p>This means:</p> \[\alpha_1(t+\Delta t)=\frac{\alpha_1(t)/\Delta t + \mathrm{Su.field} - \frac{1}{V_P} \sum_f U\alpha_1 S_{f}}{1/\Delta t-\mathrm{Sp.field} }\] <p>The corresponding equation was</p> \[\frac{\partial \alpha_1}{\partial t}+\nabla \cdot(\boldsymbol{U} \alpha_1)=\alpha_1 S_{p} + S_{u} + \alpha_{1}\nabla\cdot\boldsymbol{U}\] <p>(<strong>Note</strong>: Su.field() = \(S_u+\alpha_{1}\nabla\cdot\boldsymbol{U}\), \(\alpha_1 S_{p} + S_{u}\) is implemented in <em>alphaSuSp.H</em> in the solver)</p> <h2 id="pressure-velocity-coupling">Pressure-velocity coupling</h2> <p>The velocity field is firstly estimated from the momentum equation, then the velocity field is inserted to Eq. \ref{eq:divU}.</p> \[\begin{equation} \nabla \cdot (\mathbf{H}_{\boldsymbol{U}} - \frac{1}{a_p} \nabla p_{\mathrm{rgh}}) = -\left(\frac{\alpha_1}{\rho_1} \frac{D \rho_1}{D t} + \frac{\alpha_2}{\rho_2} \frac{D \rho_2}{D t}\right) + \dot{m}\left(\frac{1}{\rho_1} - \frac{1}{\rho_2}\right) \end{equation}\] <p>The source code for pressure-possion equation is</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>fvScalarMatrix p_rghEqnIncomp
(
    fvc::div(phiHbyA) - fvm::laplacian(rAUf, p_rgh)
    == Sp_rgh
);

solve
(
    p_rghEqnComp1() + p_rghEqnComp2() + p_rghEqnIncomp
);
</code></pre></div></div> <p>where <em>p_rghEqnIncomp</em> means the incompressible part while <em>p_rghEqnComp1</em> and <em>p_rghEqnComp2</em> are compressible parts corresponding to the two phases.</p> <ul> <li>fvc::div(phiHbyA): \(\nabla \cdot \mathbf{H}_{\boldsymbol{U}}\)</li> <li>fvm::laplacian(rAUf, p_rgh): \(\nabla \cdot ( \frac{1}{a_p} \nabla p_{\mathrm{rgh}})\)</li> <li>Sp_rgh: source term from phase change, i.e. \(\dot{m}\left(\frac{1}{\rho_1}-\frac{1}{\rho_2}\right)\)</li> <li>p_rghEqnComp1(): \(\frac{\alpha_1}{\rho_1} \frac{D \rho_1}{D t}\)</li> <li>p_rghEqnComp2(): \(\frac{\alpha_2}{\rho_2} \frac{D \rho_2}{D t}\)</li> </ul> <h3 id="consideration-of-the-compressibility">Consideration of the compressibility</h3> <p><code class="language-plaintext highlighter-rouge">coming soon</code> </p> <h2 id="phase-change-model">Phase change model</h2> <p>The phase change model was included in the $$ \ alpha$ equation via</p> <div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Pair</span><span class="o">&lt;</span><span class="n">tmp</span><span class="o">&lt;</span><span class="n">volScalarField</span><span class="o">::</span><span class="n">Internal</span><span class="o">&gt;&gt;</span> <span class="n">phaseChangeS</span>
<span class="p">(</span>
    <span class="n">phaseChange</span><span class="p">.</span><span class="n">Salpha</span><span class="p">(</span><span class="n">alpha1</span><span class="p">)</span>
<span class="p">);</span>

<span class="k">if</span> <span class="p">(</span><span class="n">phaseChangeS</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">valid</span><span class="p">())</span>
<span class="p">{</span>
    <span class="n">Su</span> <span class="o">=</span> <span class="n">phaseChangeS</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
    <span class="n">Sp</span> <span class="o">=</span> <span class="n">phaseChangeS</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>
<span class="p">}</span>
</code></pre></div></div> <p>and pressure equation via</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>fvScalarMatrix Sp_rgh<span class="o">(</span>phaseChange.Sp_rgh<span class="o">(</span>rho, gh, p_rgh<span class="o">))</span><span class="p">;</span>
</code></pre></div></div> <h3 id="the-schnerr-sauer-model">The Schnerr-Sauer model</h3> <h4 id="source-term-of-alphaeqn">Source term of alphaEqn</h4> <div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Foam</span><span class="o">::</span><span class="n">Pair</span><span class="o">&lt;</span><span class="n">Foam</span><span class="o">::</span><span class="n">tmp</span><span class="o">&lt;</span><span class="n">Foam</span><span class="o">::</span><span class="n">volScalarField</span><span class="o">::</span><span class="n">Internal</span><span class="o">&gt;&gt;</span>
<span class="n">Foam</span><span class="o">::</span><span class="n">twoPhaseChangeModels</span><span class="o">::</span><span class="n">SchnerrSauer</span><span class="o">::</span><span class="n">mDotAlphal</span><span class="p">()</span> <span class="k">const</span>
<span class="p">{</span>
    <span class="p">...</span>
    <span class="k">const</span> <span class="n">volScalarField</span><span class="o">::</span><span class="n">Internal</span> <span class="n">pCoeff</span><span class="p">(</span><span class="k">this</span><span class="o">-&gt;</span><span class="n">pCoeff</span><span class="p">(</span><span class="n">p</span><span class="p">));</span>
    <span class="p">...</span>
    <span class="k">return</span> <span class="n">Pair</span><span class="o">&lt;</span><span class="n">tmp</span><span class="o">&lt;</span><span class="n">volScalarField</span><span class="o">::</span><span class="n">Internal</span><span class="o">&gt;&gt;</span>
    <span class="p">(</span>
        <span class="n">Cc_</span><span class="o">*</span><span class="n">limitedAlpha1</span><span class="o">*</span><span class="n">pCoeff</span><span class="o">*</span><span class="n">max</span><span class="p">(</span><span class="n">p</span> <span class="o">-</span> <span class="n">pSat</span><span class="p">(),</span> <span class="n">p0_</span><span class="p">),</span>
        <span class="n">Cv_</span><span class="o">*</span><span class="p">(</span><span class="mf">1.0</span> <span class="o">+</span> <span class="n">alphaNuc</span><span class="p">()</span> <span class="o">-</span> <span class="n">limitedAlpha1</span><span class="p">)</span><span class="o">*</span><span class="n">pCoeff</span><span class="o">*</span><span class="n">min</span><span class="p">(</span><span class="n">p</span> <span class="o">-</span> <span class="n">pSat</span><span class="p">(),</span> <span class="n">p0_</span><span class="p">)</span>
    <span class="p">);</span>
<span class="p">}</span>
    <span class="c1">// Note: </span>
    <span class="c1">// pCoeff = (3*rho1()*rho2())*sqrt(2/(3*rho1()))</span>
    <span class="c1">//   *rRb(limitedAlpha1)/(rho*sqrt(mag(p - pSat()) + 0.01*pSat()));</span>
</code></pre></div></div> <p>\(\dot{m}=\underbrace{\alpha_{v}\dot{m}_{c}}_{\text{condensation}}+\underbrace{\alpha_{l}\dot{m}_{v}}_{\text{vaporization}}\)</p> \[\begin{aligned} &amp; \dot{m}_{c} = C_{c}\alpha_{l}\frac{3\rho_{l}\rho_{v}}{\rho R_{b} \sqrt{|P-P_{s}|}}\sqrt{\frac{2}{3\rho_{l}}}max(P-P_{s},0) \geq 0 \\ &amp;\dot{m}_{v} = C_{v}(1+\alpha_{Nuc}-\alpha_{l})\frac{3\rho_{l}\rho_{v}}{\rho R_{b} \sqrt{|P-P_{s}|}}\sqrt{\frac{2}{3\rho_{l}}}min(P-P_{s},0) \leq 0\\ &amp;\text{pcoeff} = \frac{3\rho_{l}\rho_{v}}{\rho R_{b} \sqrt{|P-P_{s}|}}\sqrt{\frac{2}{3\rho_{l}}} \end{aligned}\] <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Foam</span><span class="o">::</span><span class="n">Pair</span><span class="o">&lt;</span><span class="n">Foam</span><span class="o">::</span><span class="n">tmp</span><span class="o">&lt;</span><span class="n">Foam</span><span class="o">::</span><span class="n">volScalarField</span><span class="o">::</span><span class="n">Internal</span><span class="o">&gt;&gt;</span>
<span class="n">Foam</span><span class="o">::</span><span class="n">twoPhaseChangeModels</span><span class="o">::</span><span class="n">cavitationModel</span><span class="o">::</span><span class="n">Salpha</span>
<span class="p">(</span>
    <span class="n">volScalarField</span><span class="o">&amp;</span> <span class="n">alpha</span>
<span class="p">)</span> <span class="k">const</span>
<span class="p">{</span>
    <span class="p">...</span>
    <span class="k">const</span> <span class="n">volScalarField</span><span class="o">::</span><span class="n">Internal</span> <span class="n">vDotcAlphal</span><span class="p">(</span><span class="n">alphalCoeff</span><span class="o">*</span><span class="n">mDotAlphal</span><span class="p">[</span><span class="mi">0</span><span class="p">]());</span>
    <span class="k">const</span> <span class="n">volScalarField</span><span class="o">::</span><span class="n">Internal</span> <span class="n">vDotvAlphal</span><span class="p">(</span><span class="n">alphalCoeff</span><span class="o">*</span><span class="n">mDotAlphal</span><span class="p">[</span><span class="mi">1</span><span class="p">]());</span>
    <span class="k">return</span> <span class="n">Pair</span><span class="o">&lt;</span><span class="n">tmp</span><span class="o">&lt;</span><span class="n">volScalarField</span><span class="o">::</span><span class="n">Internal</span><span class="o">&gt;&gt;</span> <span class="c1">// mdot =  \alpha_{l}S_{p} + S_{u}</span>
    <span class="p">(</span>
        <span class="mi">1</span><span class="p">.</span><span class="mi">0</span><span class="o">*</span><span class="n">vDotcAlphal</span><span class="p">,</span> <span class="c1">// Su</span>
        <span class="n">vDotvAlphal</span> <span class="o">-</span> <span class="n">vDotcAlphal</span> <span class="c1">// Sp</span>
    <span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div> <p>The source term in $\alpha_{l}$ equation, $S_{\alpha}$ was seperated as</p> \[\begin{aligned} S_{\alpha} &amp;= \alpha_{l,coeff}\dot{m} \\ &amp;= \alpha_{l,coeff}(\alpha_{l}\dot{m}_{v} + \alpha_{v}\dot{m}_{c}) \\ &amp;= \alpha_{l,coeff}[\alpha_{l}(\dot{m}_{v}-\dot{m}_{c}) + \dot{m}_{c}]\\ &amp;= \underbrace{\alpha_{l}\alpha_{l,coeff}(\dot{m}_{v}-\dot{m}_{c})}_{\alpha_{l} \text{Sp} &lt;0} + \underbrace{\alpha_{l,coeff}\dot{m}_{c}}_{\text{Su} &gt;0} \\ &amp;= \alpha_{l}\text{Sp} + \text{Su} \end{aligned}\] \[\alpha_{l,coeff} = \left(\frac{1}{\rho_l}-\alpha_{l}\left(\frac{1}{\rho_l}-\frac{1}{\rho_v}\right)\right) &gt; 0\] <p>In OpenFOAM, fvm::Sp handles negative source term. fvm::Sp makes the negative source term implicit so it contributes to the diagonal and increase the . This can help convergence when the source term is negative on the rhs (sink term). (ref.: OpenFOAM® Beginner training session)</p> <h4 id="source-term-of-peqn">Source term of pEqn</h4> <p>The mass transfer rate in pEqn, $\dot{m}_{p}$ was defined as</p> \[\dot{m}_{p} = -\frac{\dot{m}}{P-P_{s}} = \underbrace{-\frac{\alpha_{l}\dot{m}_{v}}{P-P_{s}}}_{\dot{m}_{p,v} \leq 0 } - \underbrace{\frac{(1-\alpha_{l})\dot{m}_{c}}{P-P_{s}}}_{\dot{m}_{p,c} \geq 0 } = \dot{m}_{p,v} - \dot{m}_{p,c}\] <div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Foam</span><span class="o">::</span><span class="n">Pair</span><span class="o">&lt;</span><span class="n">Foam</span><span class="o">::</span><span class="n">tmp</span><span class="o">&lt;</span><span class="n">Foam</span><span class="o">::</span><span class="n">volScalarField</span><span class="o">::</span><span class="n">Internal</span><span class="o">&gt;&gt;</span>
<span class="n">Foam</span><span class="o">::</span><span class="n">twoPhaseChangeModels</span><span class="o">::</span><span class="n">SchnerrSauer</span><span class="o">::</span><span class="n">mDotP</span><span class="p">()</span> <span class="k">const</span>
<span class="p">{</span>
    <span class="k">const</span> <span class="n">volScalarField</span><span class="o">::</span><span class="n">Internal</span> <span class="n">apCoeff</span><span class="p">(</span><span class="n">limitedAlpha1</span><span class="o">*</span><span class="n">pCoeff</span><span class="p">);</span>

    <span class="k">return</span> <span class="n">Pair</span><span class="o">&lt;</span><span class="n">tmp</span><span class="o">&lt;</span><span class="n">volScalarField</span><span class="o">::</span><span class="n">Internal</span><span class="o">&gt;&gt;</span>
    <span class="p">(</span>
        <span class="n">Cc_</span><span class="o">*</span><span class="p">(</span><span class="mf">1.0</span> <span class="o">-</span> <span class="n">limitedAlpha1</span><span class="p">)</span><span class="o">*</span><span class="n">pos0</span><span class="p">(</span><span class="n">p</span> <span class="o">-</span> <span class="n">pSat</span><span class="p">())</span><span class="o">*</span><span class="n">apCoeff</span><span class="p">,</span>

        <span class="p">(</span><span class="o">-</span><span class="n">Cv_</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="mf">1.0</span> <span class="o">+</span> <span class="n">alphaNuc</span><span class="p">()</span> <span class="o">-</span> <span class="n">limitedAlpha1</span><span class="p">)</span><span class="o">*</span><span class="n">neg</span><span class="p">(</span><span class="n">p</span> <span class="o">-</span> <span class="n">pSat</span><span class="p">())</span><span class="o">*</span><span class="n">apCoeff</span>
    <span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div> \[\begin{aligned} &amp; \dot{m}_{p,c} = C_{c}(1-\alpha_{l})*\underbrace{\alpha_{l}\text{pcoeff}}_{\text{apcoeff}}*\text{pos0}(P-P_{s}) =\frac{1-\alpha_{l}}{P-P_{s}}\dot{m}_{c} \geq 0 \\ &amp;\dot{m}_{p,v} = -C_{v}(1+\alpha_{Nuc}-\alpha_{l})*\underbrace{\alpha_{l}\text{pcoeff}}_{\text{apcoeff}}*\text{neg}(P-P_{s}) = -\frac{\alpha_{l}}{P-P_{s}}\dot{m}_{v} \leq 0 \end{aligned}\] <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Foam::tmp&lt;Foam::fvScalarMatrix&gt;
Foam::twoPhaseChangeModels::cavitationModel::Sp_rgh
(
    const volScalarField&amp; rho,
    const volScalarField&amp; gh,
    volScalarField&amp; p_rgh
) const
{
    const volScalarField::Internal pCoeff(1.0/rho1() - 1.0/rho2());
    const Pair&lt;tmp&lt;volScalarField::Internal&gt;&gt; mDotP = this-&gt;mDotP();

    const volScalarField::Internal vDotcP(pCoeff*mDotP[0]);
    const volScalarField::Internal vDotvP(pCoeff*mDotP[1]);

    return
        (vDotvP - vDotcP)*(pSat() - rho()*gh())
      - fvm::Sp(vDotvP - vDotcP, p_rgh);
}
</code></pre></div></div> \[\begin{aligned} S_{P}&amp;= \left(\frac{1}{\rho_{l}}-\frac{1}{\rho_{v}}\right)\dot{m}\\ &amp; = \left(\frac{1}{\rho_{l}}-\frac{1}{\rho_{v}}\right)(\dot{m}_{p,v} - \dot{m}_{p,c})(P_{s}-P)\\ &amp; = \underbrace{\left(\frac{1}{\rho_{l}}-\frac{1}{\rho_{v}}\right)(\dot{m}_{p,v} - \dot{m}_{p,c})P_{s}}_{\text{Su}&gt;0}\quad \underbrace{-\left(\frac{1}{\rho_{l}}-\frac{1}{\rho_{v}}\right)(\dot{m}_{p,v} - \dot{m}_{p,c})P}_{P*\text{Sp}&lt;0}\\ \end{aligned}\] <p>(Note: ${1}/{\rho_{l}}-{1}/{\rho_{v}} &lt;0$)</p> <h2 id="temperature-equation">Temperature Equation</h2> <p><code class="language-plaintext highlighter-rouge">coming soon</code></p> ]]></content><author><name></name></author><category term="Solvers"/><category term="OpenFOAM"/><summary type="html"><![CDATA[this post is intended for a thorough introduction to compressibleInterFoam, including the governing equation, implementation in OpenFOAM and some demos.]]></summary></entry><entry><title type="html">An introduction to RSDFoam</title><link href="https://wengzf20.github.io/blog/2023/RSDFoam/" rel="alternate" type="text/html" title="An introduction to RSDFoam"/><published>2023-06-01T00:00:00+00:00</published><updated>2023-06-01T00:00:00+00:00</updated><id>https://wengzf20.github.io/blog/2023/RSDFoam</id><content type="html" xml:base="https://wengzf20.github.io/blog/2023/RSDFoam/"><![CDATA[ <script>function togglebibBlock(e){var o=document.getElementById(e);o&&-1!=o.className.indexOf("bibBlock")&&(-1==o.className.indexOf("noshow")?o.className="bibBlock noshow":o.className="bibBlock")}</script> <style>div.noshow{display:none}</style> <p>RSDFoam is a solver for <font color="red">R</font>eal gas <font color="red">S</font>hock and <font color="red">D</font>etonation simulation based on Open<font color="red">FOAM</font>. The present solver was based on <font color="red">the reactive Euler equations</font>. It has considered the nonidealities in the equation of state, thermodynamic functions and mass action law brought about by the interaction between the fluid particles and by their finite volume.</p> <h2 id="implementation">Implementation</h2> <p>RSDFoam was a connection between Cantera and blastFoam. A number of real gas models based on cubic equation of state were implemented by the authors in Cantera 2.4. The solver also utilize the the efficient chemistry solver (CVODE) and flexible input formats in Cantera. BlastFoam offers a number of CFD capabilities including high-order flux evaluation, time integration, etc.</p> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/forblogs/RSDFoam/CanteraDiagram-480.webp 480w,/assets/img/forblogs/RSDFoam/CanteraDiagram-800.webp 800w,/assets/img/forblogs/RSDFoam/CanteraDiagram-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/forblogs/RSDFoam/CanteraDiagram.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="example image" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Inheritance diagram for implementing real gas models in Cantera. Dashed arrow denotes an instance, indicated onto the dashed line, is created in the class pointed at. </div> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/forblogs/RSDFoam/RSDFoamDiagram-480.webp 480w,/assets/img/forblogs/RSDFoam/RSDFoamDiagram-800.webp 800w,/assets/img/forblogs/RSDFoam/RSDFoamDiagram-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/forblogs/RSDFoam/RSDFoamDiagram.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="example image" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Inheritance diagram for classes used in the connection between blastFoam and Cantera. Dashed arrow denotes an instance, indicated onto the dashed line, is created in the class pointed at. </div> <h2 id="validation">Validation</h2> <p>RSDFoam has been thoroughly validated against analytical solutions, previous numerical simulation results and experimental data. The satisfactory agreement demonstrates the accuracy and robustness of the solver for real gas based shock and detonation simulation.</p> <h3 id="shock-tube-problem">shock tube problem</h3> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/forblogs/RSDFoam/Sod_P-480.webp 480w,/assets/img/forblogs/RSDFoam/Sod_P-800.webp 800w,/assets/img/forblogs/RSDFoam/Sod_P-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/forblogs/RSDFoam/Sod_P.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="example image" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/forblogs/RSDFoam/Sod_rho-480.webp 480w,/assets/img/forblogs/RSDFoam/Sod_rho-800.webp 800w,/assets/img/forblogs/RSDFoam/Sod_rho-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/forblogs/RSDFoam/Sod_rho.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="example image" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/forblogs/RSDFoam/Sod_T-480.webp 480w,/assets/img/forblogs/RSDFoam/Sod_T-800.webp 800w,/assets/img/forblogs/RSDFoam/Sod_T-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/forblogs/RSDFoam/Sod_T.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="example image" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Analytical and numerical solutions of Sod shock tube problem at 0.05 s. </div> <h3 id="oblique-shock">Oblique shock</h3> <div class="row justify-content-sm-center"> <div class="col-sm-6 mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/forblogs/RSDFoam/ObliquePolar-480.webp 480w,/assets/img/forblogs/RSDFoam/ObliquePolar-800.webp 800w,/assets/img/forblogs/RSDFoam/ObliquePolar-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/forblogs/RSDFoam/ObliquePolar.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="example image" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> The oblique shock wave angle and deflection angle relation calculated for IG gas and RK gas. </div> <h3 id="constant-volume-reactor">Constant volume reactor</h3> <div class="row justify-content-sm-center"> <div class="col-sm-12 mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/forblogs/RSDFoam/CVIDT-480.webp 480w,/assets/img/forblogs/RSDFoam/CVIDT-800.webp 800w,/assets/img/forblogs/RSDFoam/CVIDT-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/forblogs/RSDFoam/CVIDT.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="example image" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Ignition delay time of stoichiometric (a) H_{2}-air and (b) DME-O2 mixtures calculated with IG and RK EoS. The second row shows the relative differences of IDT obtained with IG and RK EoS. </div> <h3 id="detonation-speed">Detonation speed</h3> <div class="row justify-content-sm-center"> <div class="col-sm-8 mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/forblogs/RSDFoam/DetSpeed-480.webp 480w,/assets/img/forblogs/RSDFoam/DetSpeed-800.webp 800w,/assets/img/forblogs/RSDFoam/DetSpeed-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/forblogs/RSDFoam/DetSpeed.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="example image" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Comparison of steady detonation speed calculated with CJ theory and RSDFoam, and measured by Bauer et al [1]. </div> <h3 id="reaction-zone-structure-of-steady-planar-detonation">Reaction zone structure of steady planar detonation</h3> <div class="row justify-content-sm-center"> <div class="col-sm-4 mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/forblogs/RSDFoam/ZND_P-480.webp 480w,/assets/img/forblogs/RSDFoam/ZND_P-800.webp 800w,/assets/img/forblogs/RSDFoam/ZND_P-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/forblogs/RSDFoam/ZND_P.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="example image" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm-4 mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/forblogs/RSDFoam/ZND_T-480.webp 480w,/assets/img/forblogs/RSDFoam/ZND_T-800.webp 800w,/assets/img/forblogs/RSDFoam/ZND_T-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/forblogs/RSDFoam/ZND_T.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="example image" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm-4 mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/forblogs/RSDFoam/ZND_massFraction-480.webp 480w,/assets/img/forblogs/RSDFoam/ZND_massFraction-800.webp 800w,/assets/img/forblogs/RSDFoam/ZND_massFraction-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/forblogs/RSDFoam/ZND_massFraction.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="example image" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Flow structure of detonations obtained with 1D unsteady simulation and the ZND theory. </div> <h3 id="pulsating-detonation">Pulsating detonation</h3> <div class="row justify-content-sm-center"> <div class="col-sm-12 mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/forblogs/RSDFoam/pulsatingDet-480.webp 480w,/assets/img/forblogs/RSDFoam/pulsatingDet-800.webp 800w,/assets/img/forblogs/RSDFoam/pulsatingDet-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/forblogs/RSDFoam/pulsatingDet.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="example image" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Shock pressure of pulsating detonation. Four mesh sizes were used for the convergence study. </div> <h3 id="2d-cellular-detonation">2D Cellular detonation</h3> <div class="row justify-content-sm-center"> <div class="col-sm-12 mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/forblogs/RSDFoam/CellularStructure-480.webp 480w,/assets/img/forblogs/RSDFoam/CellularStructure-800.webp 800w,/assets/img/forblogs/RSDFoam/CellularStructure-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/forblogs/RSDFoam/CellularStructure.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="example image" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Numerical soot foils obtained with (a) IG EoS and (b) NA EoS. </div> <h2 id="to-use-the-solver">To use the solver</h2> <p>Source codes and demos are available upon reasonable request.</p> <p>Please cite our papers if you use this solver for your research</p> <pre>
@article{WengCAF2023,
  title = {Implementation of an  Solver for Shock and Detonation Simulation at High Pressure},
  author = {Weng, Zifeng and M{\'e}vel, R{\'e}my},
  year = {2023},
  journal = {Computers \&amp; Fluids},
  pages = {106012},
  doi = {10.1016/j.compfluid.2023.106012}
}
</pre> <p><a href="javascript:togglebibBlock('ref2')" class="textlink">Previous works using this solver</a></p> <div id="ref2" class="bibBlock noshow"> <pre>
[1] Zifeng Weng, Rémy Mével. An OpenFOAM Solver for Shock and Detonation Simulation in Real Gas. The 29th ICDERS. At: Siheung, South Korea (2023).
[2] Zifeng Weng, Rémy Mével. Implementation of an OpenFOAM solver for shock and detonation simulation at high pressure.  Computers &amp; Fluids 265, 106012 (2023).
[3] Zifeng Weng, Rémy Mével. Linear and non-linear stability of gaseous detonation at elevated pressure. Combustion and Flame 262, 113361 (2024).
[4] Zifeng Weng, Rémy Mével. Dynamics of detonation cellular structure in linear and nonlinear instability regimes. (under reviewed)
</pre> </div> <p><a href="javascript:togglebibBlock('ref1')" class="textlink">References</a></p> <div id="ref1" class="bibBlock noshow"> <pre>
[1] R.G. Schmitt, and P.B. Butler, “Detonation Properties of Gases at Elevated Initial Pressures,” Combustion Science and Technology 106(1–3), 167–191 (1995).
</pre> </div>]]></content><author><name></name></author><category term="Solvers"/><category term="OpenFOAM"/><summary type="html"><![CDATA[an in-house solver for real gas shock and detonation simulation]]></summary></entry><entry><title type="html">Prepare figures for journal articles</title><link href="https://wengzf20.github.io/blog/2023/jupyter-notebook/" rel="alternate" type="text/html" title="Prepare figures for journal articles"/><published>2023-05-01T00:00:00+00:00</published><updated>2023-05-01T00:00:00+00:00</updated><id>https://wengzf20.github.io/blog/2023/jupyter-notebook</id><content type="html" xml:base="https://wengzf20.github.io/blog/2023/jupyter-notebook/"><![CDATA[<div class="jupyter-notebook" style="position: relative; width: 100%; margin: 0 auto;"> <div class="jupyter-notebook-iframe-container"> <iframe src="/assets/jupyter/plotFig.ipynb.html" style="position: absolute; top: 0; left: 0; border-style: none;" width="100%" height="100%" onload="this.parentElement.style.paddingBottom = (this.contentWindow.document.documentElement.scrollHeight + 10) + 'px'"></iframe> </div> </div>]]></content><author><name></name></author><category term="Code"/><category term="artworks"/><summary type="html"><![CDATA[an summary of codes for preparing figures based on python]]></summary></entry></feed>